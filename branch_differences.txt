diff --git a/.gitignore b/.gitignore
index 25155d2..d23366b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -31,3 +31,4 @@ yarn-error.log*
 # typescript
 *.tsbuildinfo
 next-env.d.ts 
+.env
diff --git a/app/actions/getConversationById.ts b/app/actions/getConversationById.ts
index da4cfaf..081456d 100644
--- a/app/actions/getConversationById.ts
+++ b/app/actions/getConversationById.ts
@@ -1,5 +1,7 @@
 import prisma from "@/app/libs/prismadb";
 import getCurrentUser from "./getCurrentUser";
+import { Prisma } from "@prisma/client";
+import { analyzeConversationSentiment } from "@/app/utils/mentalHealth";
 
 const getConversationById = async (conversationId: string) => {
   try {
@@ -40,7 +42,67 @@ const getConversationById = async (conversationId: string) => {
       return null;
     }
 
-    return conversation;
+    // Fetch mental health insights for each message using raw SQL
+    const messagesWithInsights = await Promise.all(
+      conversation.messages.map(async (message) => {
+        const insights = await prisma.$queryRaw<Array<{
+          id: number;
+          messageId: number;
+          sentimentScore: number;
+          emotionalState: string;
+          riskLevel: string;
+          keywords: string | null;
+          recommendations: string | null;
+          createdAt: Date;
+        }>>`
+          SELECT * FROM MentalHealthInsight WHERE messageId = ${message.id}
+        `;
+
+        return {
+          ...message,
+          mentalHealthInsights: insights
+        };
+      })
+    );
+
+    // Analyze conversation-level sentiment
+    const conversationSentiment = analyzeConversationSentiment(messagesWithInsights);
+
+    // Store or update conversation sentiment
+    await prisma.$executeRaw`
+      INSERT INTO ConversationSentiment (
+        conversationId,
+        sentimentScore,
+        emotionalState,
+        riskLevel,
+        keywords,
+        recommendations,
+        createdAt,
+        updatedAt
+      ) VALUES (
+        ${parseInt(conversationId)},
+        ${conversationSentiment.sentimentScore},
+        ${conversationSentiment.emotionalState},
+        ${conversationSentiment.riskLevel},
+        ${conversationSentiment.keywords.join(',')},
+        ${conversationSentiment.recommendations.join('\n')},
+        NOW(),
+        NOW()
+      )
+      ON DUPLICATE KEY UPDATE
+        sentimentScore = VALUES(sentimentScore),
+        emotionalState = VALUES(emotionalState),
+        riskLevel = VALUES(riskLevel),
+        keywords = VALUES(keywords),
+        recommendations = VALUES(recommendations),
+        updatedAt = NOW()
+    `;
+
+    return {
+      ...conversation,
+      messages: messagesWithInsights,
+      sentiment: conversationSentiment
+    };
   } catch (error) {
     console.log(error, "ERROR_CONVERSATION_BY_ID");
     return null;
diff --git a/app/actions/getMessages.ts b/app/actions/getMessages.ts
index 770fc95..bce96f2 100644
--- a/app/actions/getMessages.ts
+++ b/app/actions/getMessages.ts
@@ -17,6 +17,7 @@ const getMessages = async (conversationId: string) => {
             user: true
           }
         },
+        mentalHealthInsights: true
       },
     });
 
diff --git a/app/api/conversations/[conversationId]/route.ts b/app/api/conversations/[conversationId]/route.ts
index 38c7b9c..5e22a03 100644
--- a/app/api/conversations/[conversationId]/route.ts
+++ b/app/api/conversations/[conversationId]/route.ts
@@ -119,9 +119,11 @@ export async function GET(
               include: {
                 user: true
               }
-            }
+            },
+            mentalHealthInsights: true
           }
         },
+        sentiment: true
       },
     });
 
@@ -131,7 +133,7 @@ export async function GET(
 
     // Check if current user is part of the conversation
     const isUserInConversation = conversation.users.some(
-      userConv => userConv.userId === currentUser.id
+      (userConv: { userId: number }) => userConv.userId === currentUser.id
     );
 
     if (!isUserInConversation) {
diff --git a/app/api/messages/route.ts b/app/api/messages/route.ts
index 7136377..32546bf 100644
--- a/app/api/messages/route.ts
+++ b/app/api/messages/route.ts
@@ -1,133 +1,203 @@
-import getCurrentUser from "@/app/actions/getCurrentUser";
+import { NextResponse } from "next/server";
+import { getServerSession } from "next-auth";
+import { authOptions } from "@/app/api/auth/[...nextauth]/route";
 import prisma from "@/app/libs/prismadb";
+import { analyzeMentalHealth, shouldTriggerAlert, analyzeConversationSentiment } from "@/app/utils/mentalHealth";
 import { pusherServer } from "@/app/libs/pusher";
-import { NextResponse } from "next/server";
 
-export async function POST(req: Request) {
+export async function POST(request: Request) {
   try {
-    const currentUser = await getCurrentUser();
-    const body = await req.json();
+    const session = await getServerSession(authOptions);
+    const { message, image, conversationId } = await request.json();
 
-    const { message, image, conversationId } = body;
-
-    if (!currentUser?.id || !currentUser.email) {
+    if (!session?.user?.email) {
       return new NextResponse("Unauthorized", { status: 401 });
     }
 
-    // Validate conversationId
     if (!conversationId) {
-      return new NextResponse("Missing conversationId", { status: 400 });
+      return new NextResponse("Conversation ID is required", { status: 400 });
     }
 
-    // Parse conversationId safely
-    const parsedConversationId = parseInt(conversationId);
-    if (isNaN(parsedConversationId)) {
-      return new NextResponse("Invalid conversationId format", { status: 400 });
+    if (!message) {
+      return new NextResponse("Message is required", { status: 400 });
     }
 
-    try {
-      // Create the new message
-      const newMessage = await prisma.message.create({
+    const currentUser = await prisma.user.findUnique({
+      where: {
+        email: session.user.email,
+      },
+    });
+
+    if (!currentUser) {
+      return new NextResponse("Unauthorized", { status: 401 });
+    }
+
+    // Convert conversationId to number
+    const numericConversationId = parseInt(conversationId, 10);
+    if (isNaN(numericConversationId)) {
+      return new NextResponse("Invalid conversation ID", { status: 400 });
+    }
+
+    // Analyze message for mental health insights
+    const mentalHealthAnalysis = analyzeMentalHealth(message);
+
+    // Create the message with transaction to ensure both message and insight are created
+    const result = await prisma.$transaction(async (tx) => {
+      // Create message with mental health insight
+      const newMessage = await tx.message.create({
         data: {
           body: message,
-          image,
-          conversation: {
-            connect: {
-              id: parsedConversationId,
-            },
-          },
-          sender: {
-            connect: {
-              id: currentUser.id,
-            },
+          image: image,
+          conversationId: numericConversationId,
+          senderId: currentUser.id,
+          seenBy: {
+            create: {
+              userId: currentUser.id
+            }
           },
+          mentalHealthInsights: {
+            create: {
+              sentimentScore: mentalHealthAnalysis.sentimentScore,
+              emotionalState: mentalHealthAnalysis.emotionalState,
+              riskLevel: mentalHealthAnalysis.riskLevel,
+              keywords: mentalHealthAnalysis.keywords.join(','),
+              recommendations: mentalHealthAnalysis.recommendations.join('\n')
+            }
+          }
         },
         include: {
-          sender: true,
           seenBy: {
             include: {
               user: true
             }
           },
-        },
+          sender: true,
+          mentalHealthInsights: true
+        }
       });
 
-      // Create the seen relationship separately
-      await prisma.userSeenMessage.create({
-        data: {
-          userId: currentUser.id,
-          messageId: newMessage.id
+      // Get all messages in the conversation to update conversation sentiment
+      const conversationMessages = await tx.message.findMany({
+        where: {
+          conversationId: numericConversationId
+        },
+        include: {
+          mentalHealthInsights: true
         }
       });
 
-      const updatedConversation = await prisma.conversation.update({
+      // Analyze conversation sentiment
+      const conversationSentiment = analyzeConversationSentiment(conversationMessages);
+
+      // Update or create conversation sentiment
+      await tx.conversationSentiment.upsert({
         where: {
-          id: parsedConversationId,
-        },
-        data: {
-          lastMessageAt: new Date(),
+          conversationId: numericConversationId
         },
-        include: {
-          users: {
-            include: {
-              user: true
-            }
-          },
-          messages: {
-            include: {
-              seenBy: {
-                include: {
-                  user: true
-                }
-              },
-              sender: true
-            },
-            orderBy: {
-              createdAt: 'desc'
-            },
-            take: 1
-          },
+        create: {
+          conversationId: numericConversationId,
+          sentimentScore: conversationSentiment.sentimentScore,
+          emotionalState: conversationSentiment.emotionalState,
+          riskLevel: conversationSentiment.riskLevel,
+          keywords: conversationSentiment.keywords.join(','),
+          recommendations: conversationSentiment.recommendations.join('\n')
         },
+        update: {
+          sentimentScore: conversationSentiment.sentimentScore,
+          emotionalState: conversationSentiment.emotionalState,
+          riskLevel: conversationSentiment.riskLevel,
+          keywords: conversationSentiment.keywords.join(','),
+          recommendations: conversationSentiment.recommendations.join('\n'),
+          updatedAt: new Date()
+        }
       });
 
-      // Trigger Pusher events with safety checks and error handling
-      try {
-        // For conversation channel
-        if (conversationId) {
-          await pusherServer.trigger(conversationId.toString(), "messages:new", newMessage);
-        }
+      return {
+        message: newMessage,
+        sentiment: conversationSentiment
+      };
+    });
 
-        // For individual user channels
-        if (updatedConversation.users && updatedConversation.users.length > 0 && 
-            updatedConversation.messages && updatedConversation.messages.length > 0) {
-          
-          // Get the last message
-          const lastMessage = updatedConversation.messages[0];
-          
-          // For each user, trigger a conversation update
-          for (const userConversation of updatedConversation.users) {
-            const userEmail = userConversation.user?.email;
-            
-            if (userEmail) {
-              await pusherServer.trigger(userEmail, "conversation:update", {
-                id: updatedConversation.id,
-                messages: [lastMessage],
-              });
-            }
-          }
-        }
-      } catch (error) {
-        console.error("PUSHER_ERROR", error);
-        // Continue execution even if Pusher fails
+    // Update conversation last message time
+    await prisma.conversation.update({
+      where: {
+        id: numericConversationId
+      },
+      data: {
+        lastMessageAt: new Date()
       }
+    });
 
-      return NextResponse.json(newMessage);
-    } catch (dbError) {
-      console.error("[DATABASE_ERROR]", dbError);
-      return new NextResponse("Database Error", { status: 500 });
+    // Trigger Pusher events
+    try {
+      // Trigger the message:new event on the conversation channel
+      const channelName = `presence-conversation-${conversationId}`;
+      console.log('[PUSHER] Using channel name:', channelName);
+      console.log('[PUSHER] Triggering messages:new event with data:', result.message);
+      await pusherServer.trigger(channelName, "messages:new", result.message);
+
+      // Update the conversation's last message time and trigger conversation update with sentiment
+      console.log('[PUSHER] Triggering conversation:update event with data:', {
+        id: numericConversationId,
+        lastMessageAt: new Date(),
+        sentiment: result.sentiment
+      });
+      await pusherServer.trigger(channelName, "conversation:update", {
+        id: numericConversationId,
+        lastMessageAt: new Date(),
+        sentiment: result.sentiment
+      });
+    } catch (error) {
+      console.error("[PUSHER] Error triggering Pusher events:", error);
     }
+
+    return NextResponse.json(result.message);
+  } catch (error) {
+    console.error("Error creating message:", error);
+    return new NextResponse("Internal Error", { status: 500 });
+  }
+}
+
+export async function GET(request: Request) {
+  try {
+    const session = await getServerSession(authOptions);
+    const { searchParams } = new URL(request.url);
+    const conversationId = searchParams.get('conversationId');
+
+    if (!session?.user?.email) {
+      return new NextResponse("Unauthorized", { status: 401 });
+    }
+
+    if (!conversationId) {
+      return new NextResponse("Conversation ID is required", { status: 400 });
+    }
+
+    const numericConversationId = parseInt(conversationId, 10);
+    if (isNaN(numericConversationId)) {
+      return new NextResponse("Invalid conversation ID", { status: 400 });
+    }
+
+    const messages = await prisma.message.findMany({
+      where: {
+        conversationId: numericConversationId
+      },
+      include: {
+        seenBy: {
+          include: {
+            user: true
+          }
+        },
+        sender: true,
+        mentalHealthInsights: true
+      },
+      orderBy: {
+        createdAt: 'asc'
+      }
+    });
+
+    return NextResponse.json(messages);
   } catch (error) {
-    console.log("[MESSAGES_ERROR]", error);
-    return new NextResponse("Internal Server Error", { status: 500 });
+    console.error("Error fetching messages:", error);
+    return new NextResponse("Internal Error", { status: 500 });
   }
 }
diff --git a/app/api/pusher/auth/route.ts b/app/api/pusher/auth/route.ts
new file mode 100644
index 0000000..329a2fb
--- /dev/null
+++ b/app/api/pusher/auth/route.ts
@@ -0,0 +1,45 @@
+import { NextResponse } from "next/server";
+import { getServerSession } from "next-auth";
+import { authOptions } from "@/app/api/auth/[...nextauth]/route";
+import { pusherServer } from "@/app/libs/pusher";
+
+export async function POST(request: Request) {
+  try {
+    const session = await getServerSession(authOptions);
+
+    if (!session?.user?.email) {
+      return new NextResponse("Unauthorized", { status: 401 });
+    }
+
+    const data = await request.formData();
+    const socketId = data.get("socket_id") as string;
+    const channel = data.get("channel_name") as string;
+
+    if (!socketId || !channel) {
+      return new NextResponse("Missing socket_id or channel_name", { status: 400 });
+    }
+
+    console.log("Authorizing channel:", channel, "for socket:", socketId);
+    
+    // For presence channels, we need to include user data
+    if (channel.startsWith('presence-')) {
+      const authResponse = pusherServer.authorizeChannel(socketId, channel, {
+        user_id: session.user.email,
+        user_info: {
+          name: session.user.name || 'Anonymous',
+          email: session.user.email
+        }
+      });
+      console.log("Auth response for presence channel:", authResponse);
+      return NextResponse.json(authResponse);
+    }
+    
+    // For regular channels
+    const authResponse = pusherServer.authorizeChannel(socketId, channel);
+    console.log("Auth response for regular channel:", authResponse);
+    return NextResponse.json(authResponse);
+  } catch (error) {
+    console.error("PUSHER_AUTH_ERROR", error);
+    return new NextResponse("Internal Error", { status: 500 });
+  }
+} 
\ No newline at end of file
diff --git a/app/components/MentalHealthAlert.tsx b/app/components/MentalHealthAlert.tsx
new file mode 100644
index 0000000..533ad05
--- /dev/null
+++ b/app/components/MentalHealthAlert.tsx
@@ -0,0 +1,84 @@
+import { useState } from 'react';
+import { FiAlertTriangle, FiX } from 'react-icons/fi';
+import { FiSmile, FiFrown, FiMeh } from 'react-icons/fi';
+
+interface MentalHealthAlertProps {
+  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH';
+  recommendations: string[];
+  onClose: () => void;
+  emotionalState?: string;
+  sentimentScore?: number;
+}
+
+const MentalHealthAlert: React.FC<MentalHealthAlertProps> = ({
+  riskLevel,
+  recommendations,
+  onClose,
+  emotionalState = 'NEUTRAL',
+  sentimentScore = 0
+}) => {
+  const getAlertColor = () => {
+    switch (riskLevel) {
+      case 'HIGH':
+        return 'bg-red-50 border-red-200 text-red-800';
+      case 'MEDIUM':
+        return 'bg-yellow-50 border-yellow-200 text-yellow-800';
+      default:
+        return 'bg-blue-50 border-blue-200 text-blue-800';
+    }
+  };
+
+  // Get sentiment icon based on emotional state
+  const getSentimentIcon = () => {
+    switch (emotionalState) {
+      case 'POSITIVE':
+        return <FiSmile className="h-5 w-5 text-green-500" />;
+      case 'NEGATIVE':
+        return <FiFrown className="h-5 w-5 text-red-500" />;
+      default:
+        return <FiMeh className="h-5 w-5 text-yellow-500" />;
+    }
+  };
+
+  return (
+    <div className={`p-4 rounded-lg border ${getAlertColor()} mb-4`}>
+      <div className="flex items-start">
+        <div className="flex-shrink-0">
+          <FiAlertTriangle className="h-5 w-5" />
+        </div>
+        <div className="ml-3 flex-1">
+          <div className="flex items-center">
+            <h3 className="text-sm font-medium">
+              {riskLevel === 'HIGH' ? 'Urgent Support Available' :
+               riskLevel === 'MEDIUM' ? 'Support Available' :
+               'Sentiment Analysis'}
+            </h3>
+            <div className="ml-2 flex items-center">
+              {getSentimentIcon()}
+              <span className="ml-1 text-sm">
+                {emotionalState} ({sentimentScore > 0 ? '+' : ''}{sentimentScore})
+              </span>
+            </div>
+          </div>
+          <div className="mt-2 text-sm">
+            <ul className="list-disc pl-5 space-y-1">
+              {recommendations.map((rec, index) => (
+                <li key={index}>{rec}</li>
+              ))}
+            </ul>
+          </div>
+        </div>
+        <div className="ml-4 flex-shrink-0 flex">
+          <button
+            onClick={onClose}
+            className="inline-flex text-gray-400 hover:text-gray-500"
+          >
+            <FiX className="h-5 w-5" />
+          </button>
+        </div>
+      </div>
+    </div>
+  );
+};
+
+export default MentalHealthAlert; 
\ No newline at end of file
diff --git a/app/components/avatar.tsx b/app/components/avatar.tsx
index a37838f..0067f8f 100644
--- a/app/components/avatar.tsx
+++ b/app/components/avatar.tsx
@@ -21,6 +21,7 @@ const Avatar: FC<AvatarProps> = ({ user }) => {
 					alt="Avatar"
 					src={user?.image || "/images/placeholder.jpg"}
 					fill
+					sizes="(max-width: 768px) 36px, 44px"
 				/>
 			</div>
 			{isActive && (
diff --git a/app/conversations/[conversationId]/components/Body.tsx b/app/conversations/[conversationId]/components/Body.tsx
index ab1d69a..c4bcd69 100644
--- a/app/conversations/[conversationId]/components/Body.tsx
+++ b/app/conversations/[conversationId]/components/Body.tsx
@@ -1,70 +1,86 @@
 "use client";
 
-import useConversation from "@/app/hooks/useConversation";
+import { useEffect, useRef, useState } from "react";
+import { useSession } from "next-auth/react";
 import { pusherClient } from "@/app/libs/pusher";
-import { FullMessageType } from "@/app/types";
-import axios from "axios";
 import { find } from "lodash";
-import { FC, useEffect, useRef, useState } from "react";
 import MessageBox from "./MessageBox";
+import { FullMessageType } from "@/app/types";
+import axios from "axios";
 
 interface BodyProps {
   initialMessages: FullMessageType[];
+  conversationId: string;
 }
 
-const Body: FC<BodyProps> = ({ initialMessages }) => {
-  const [messages, setMessages] = useState(initialMessages);
+const Body: React.FC<BodyProps> = ({ initialMessages, conversationId }) => {
+  const [messages, setMessages] = useState<FullMessageType[]>(initialMessages);
   const bottomRef = useRef<HTMLDivElement>(null);
-
-  const { conversationId } = useConversation();
+  const { data: session } = useSession();
 
   useEffect(() => {
     axios.post(`/api/conversations/${conversationId}/seen`);
   }, [conversationId]);
 
   useEffect(() => {
-    pusherClient.subscribe(conversationId);
-    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
+    if (!conversationId || !pusherClient) {
+      return;
+    }
+
+    const channel = pusherClient.subscribe(`presence-conversation-${conversationId}`);
 
     const messageHandler = (message: FullMessageType) => {
       axios.post(`/api/conversations/${conversationId}/seen`);
-      setMessages((messages) => {
-        if (find(messages, { id: message.id })) {
-          return messages;
-        }
 
-        return [...messages, message];
+      setMessages((current) => {
+        if (find(current, { id: message.id })) {
+          return current;
+        }
+        return [...current, message];
       });
-
-      bottomRef.current?.scrollIntoView({ behavior: "smooth" });
     };
 
-    const updateMessageHandler = (message: FullMessageType) => {
+    const updateMessageHandler = (newMessage: FullMessageType) => {
       setMessages((current) =>
-        current.map((m) => {
-          if (m.id === message.id) {
-            return message;
+        current.map((currentMessage) => {
+          if (currentMessage.id === newMessage.id) {
+            return newMessage;
           }
-
-          return m;
+          return currentMessage;
         })
       );
     };
 
-    pusherClient.bind("messages:new", messageHandler);
-    pusherClient.bind("message:update", updateMessageHandler);
+    const conversationUpdateHandler = (data: { id: string; lastMessageAt: Date; sentiment: any }) => {
+      // No need to update messages with sentiment as it's handled at the page level
+    };
+
+    channel.bind("messages:new", messageHandler);
+    channel.bind("message:update", updateMessageHandler);
+    channel.bind("conversation:update", conversationUpdateHandler);
 
     return () => {
-      pusherClient.unsubscribe(conversationId);
-      pusherClient.unbind("messages:new", messageHandler);
-      pusherClient.unbind("message:update", updateMessageHandler);
+      channel.unbind("messages:new", messageHandler);
+      channel.unbind("message:update", updateMessageHandler);
+      channel.unbind("conversation:update", conversationUpdateHandler);
+      if (pusherClient) {
+        pusherClient.unsubscribe(`presence-conversation-${conversationId}`);
+      }
     };
   }, [conversationId]);
 
+  useEffect(() => {
+    bottomRef?.current?.scrollIntoView();
+  }, [messages]);
+
   return (
     <div className="flex-1 overflow-y-auto">
-      {messages.map((message, index) => (
-        <MessageBox isLast={index === messages.length - 1} key={message.id} message={message} />
+      {messages.map((message, i) => (
+        <MessageBox
+          isLast={i === messages.length - 1}
+          key={message.id}
+          message={message}
+        />
       ))}
       <div ref={bottomRef} className="pt-24" />
     </div>
diff --git a/app/conversations/[conversationId]/components/ConversationBox.tsx b/app/conversations/[conversationId]/components/ConversationBox.tsx
new file mode 100644
index 0000000..329d67f
--- /dev/null
+++ b/app/conversations/[conversationId]/components/ConversationBox.tsx
@@ -0,0 +1,6 @@
+							<div className={`flex items-center gap-1 ${sentimentInfo.bgColor} ${sentimentInfo.color} px-2 py-0.5 rounded-full`}>
+								{sentimentInfo.icon}
+								<span className="text-xs font-medium">
+									{sentimentInfo.score}/100
+								</span>
+							</div> 
\ No newline at end of file
diff --git a/app/conversations/[conversationId]/components/ConversationSentiment.tsx b/app/conversations/[conversationId]/components/ConversationSentiment.tsx
new file mode 100644
index 0000000..7c4378a
--- /dev/null
+++ b/app/conversations/[conversationId]/components/ConversationSentiment.tsx
@@ -0,0 +1,59 @@
+import { FC } from 'react';
+import { FiSmile, FiFrown, FiMeh, FiInfo } from 'react-icons/fi';
+import { ConversationSentiment as ConversationSentimentType } from '@/app/types';
+
+interface ConversationSentimentProps {
+  sentiment: ConversationSentimentType;
+}
+
+const ConversationSentiment: FC<ConversationSentimentProps> = ({ sentiment }) => {
+  const getSentimentIcon = () => {
+    switch (sentiment.emotionalState) {
+      case 'POSITIVE':
+        return <FiSmile className="h-5 w-5 text-green-500" />;
+      case 'NEGATIVE':
+        return <FiFrown className="h-5 w-5 text-red-500" />;
+      default:
+        return <FiMeh className="h-5 w-5 text-yellow-500" />;
+    }
+  };
+
+  const getRiskLevelColor = () => {
+    switch (sentiment.riskLevel) {
+      case 'HIGH':
+        return 'bg-red-50 border-red-200 text-red-800';
+      case 'MEDIUM':
+        return 'bg-yellow-50 border-yellow-200 text-yellow-800';
+      default:
+        return 'bg-blue-50 border-blue-200 text-blue-800';
+    }
+  };
+
+  return (
+    <div className={`p-3 rounded-lg border ${getRiskLevelColor()} mb-4`}>
+      <div className="flex items-center gap-2">
+        {getSentimentIcon()}
+        <div>
+          <div className="text-sm font-medium">
+            Conversation Sentiment: {sentiment.emotionalState}
+          </div>
+          <div className="text-xs">
+            Score: {sentiment.sentimentScore > 0 ? '+' : ''}{sentiment.sentimentScore}
+          </div>
+        </div>
+      </div>
+      {sentiment.recommendations.length > 0 && (
+        <div className="mt-2 text-xs">
+          <div className="font-medium mb-1">Recommendations:</div>
+          <ul className="list-disc pl-4 space-y-1">
+            {sentiment.recommendations.map((rec, index) => (
+              <li key={index}>{rec}</li>
+            ))}
+          </ul>
+        </div>
+      )}
+    </div>
+  );
+};
+
+export default ConversationSentiment; 
\ No newline at end of file
diff --git a/app/conversations/[conversationId]/components/Form.tsx b/app/conversations/[conversationId]/components/Form.tsx
index bf2c568..9d29d5e 100644
--- a/app/conversations/[conversationId]/components/Form.tsx
+++ b/app/conversations/[conversationId]/components/Form.tsx
@@ -35,37 +35,13 @@ const Form = () => {
     setIsSubmitting(true);
     setValue("message", "", { shouldValidate: true });
 
-    // Log the request being sent (only in development)
-    if (process.env.NODE_ENV === 'development') {
-      console.log('[SENDING MESSAGE]', { data, conversationId });
-    }
-
     axios.post("/api/messages", {
       ...data,
       conversationId,
     })
-    .then(response => {
-      if (process.env.NODE_ENV === 'development') {
-        console.log('[MESSAGE SENT]', response.data);
-      }
-    })
     .catch((error) => {
       console.error('Error sending message:', error.response?.data || error.message || error);
       toast.error('Failed to send message. Please try again.');
-      
-      // Detailed error logging
-      if (error.response) {
-        // The request was made and the server responded with a status code
-        // that falls out of the range of 2xx
-        console.error('Error response:', {
-          data: error.response.data,
-          status: error.response.status,
-          headers: error.response.headers
-        });
-      } else if (error.request) {
-        // The request was made but no response was received
-        console.error('Error request:', error.request);
-      }
     })
     .finally(() => {
       setIsSubmitting(false);
@@ -77,34 +53,13 @@ const Form = () => {
     
     setIsSubmitting(true);
     
-    // Log the upload request (only in development)
-    if (process.env.NODE_ENV === 'development') {
-      console.log('[UPLOADING IMAGE]', { result: result?.info, conversationId });
-    }
-    
     axios.post("/api/messages", {
       image: result?.info?.secure_url,
       conversationId,
     })
-    .then(response => {
-      if (process.env.NODE_ENV === 'development') {
-        console.log('[IMAGE SENT]', response.data);
-      }
-    })
     .catch((error) => {
       console.error('Error uploading image:', error.response?.data || error.message || error);
       toast.error('Failed to upload image. Please try again.');
-      
-      // Detailed error logging
-      if (error.response) {
-        console.error('Error response:', {
-          data: error.response.data,
-          status: error.response.status,
-          headers: error.response.headers
-        });
-      } else if (error.request) {
-        console.error('Error request:', error.request);
-      }
     })
     .finally(() => {
       setIsSubmitting(false);
@@ -116,9 +71,10 @@ const Form = () => {
       <CldUploadButton
         options={{
           maxFiles: 1,
+          sources: ['local', 'camera'],
         }}
         onUpload={handleUpload}
-        uploadPreset="weopayd7"
+        uploadPreset={process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET}
       >
         <HiPhoto size={30} className="text-sky-500" />
       </CldUploadButton>
diff --git a/app/conversations/[conversationId]/components/Header.tsx b/app/conversations/[conversationId]/components/Header.tsx
index ab080a6..32c1e4d 100644
--- a/app/conversations/[conversationId]/components/Header.tsx
+++ b/app/conversations/[conversationId]/components/Header.tsx
@@ -6,14 +6,24 @@ import useActiveList from "@/app/hooks/useActiveList";
 import useOtherUser from "@/app/hooks/useOtherUser";
 import { FullConversationType } from "@/app/types";
 import Link from "next/link";
-import { FC, useMemo, useState } from "react";
+import { FC, useEffect, useMemo, useState } from "react";
 import { HiChevronLeft, HiEllipsisHorizontal } from "react-icons/hi2";
+import { MdSentimentVerySatisfied, MdSentimentVeryDissatisfied, MdSentimentNeutral } from "react-icons/md";
 import ProfileDrawer from "./ProfileDrawer";
 
 interface HeaderProps {
 	conversation: FullConversationType;
 }
 
+interface SentimentDisplayInfo {
+	icon: JSX.Element;
+	color: string;
+	bgColor: string;
+	text: string;
+	description: string;
+	score: number;
+}
+
 const Header: FC<HeaderProps> = ({ conversation }) => {
 	const otherUser = useOtherUser(conversation);
 	const [drawerOpen, setDrawerOpen] = useState(false);
@@ -26,19 +36,62 @@ const Header: FC<HeaderProps> = ({ conversation }) => {
 		if (!conversation.users) {
 			return [];
 		}
-		
-		// Handle the MySQL schema with junction table
 		return conversation.users.map(userConv => userConv.user);
 	}, [conversation.users]);
 
 	const statusText = useMemo(() => {
 		if (conversation.isGroup) {
-			return `${conversation.users.length} members`;
+			return `${users.length} members`;
 		}
 
 		return isActive ? "Active" : "Offline";
 	}, [conversation, isActive]);
 
+	// Get sentiment information from the conversation
+	const getSentimentInfo = (): SentimentDisplayInfo | null => {
+		if (!conversation.sentiment) {
+			return null;
+		}
+
+		const sentiment = conversation.sentiment;
+
+		let icon;
+		let color;
+		let bgColor;
+		let text;
+
+		switch (sentiment.emotionalState) {
+			case 'POSITIVE':
+				icon = <MdSentimentVerySatisfied className="h-7 w-7" />;
+				color = 'text-green-600';
+				bgColor = 'bg-gradient-to-r from-green-50 to-green-100';
+				text = 'Positive Mood';
+				break;
+			case 'NEGATIVE':
+				icon = <MdSentimentVeryDissatisfied className="h-7 w-7" />;
+				color = 'text-red-600';
+				bgColor = 'bg-gradient-to-r from-red-50 to-red-100';
+				text = 'Needs Support';
+				break;
+			default:
+				icon = <MdSentimentNeutral className="h-7 w-7" />;
+				color = 'text-yellow-600';
+				bgColor = 'bg-gradient-to-r from-yellow-50 to-yellow-100';
+				text = 'Neutral Mood';
+		}
+
+		return {
+			icon,
+			color,
+			bgColor,
+			text,
+			description: sentiment.recommendations?.split('\n')[0] || `The conversation has a ${sentiment.emotionalState.toLowerCase()} tone`,
+			score: sentiment.sentimentScore
+		};
+	};
+
+	const sentimentInfo = getSentimentInfo();
+
 	return (
 		<>
 			<ProfileDrawer
@@ -46,31 +99,53 @@ const Header: FC<HeaderProps> = ({ conversation }) => {
 				onClose={() => setDrawerOpen(false)}
 				data={conversation}
 			/>
-			<div className="bg-white w-full flex border-b-[1px] sm:px-4 py-3 px-4 lg:px-6 justify-between items-center shadow-sm">
-				<div className="flex gap-3 items-center">
-					<Link
-						href="/conversations"
-						className="lg:hidden block text-sky-500 hover:text-sky-600 transition cursor-pointer"
-					>
-						<HiChevronLeft size={32} />
-					</Link>
-					{conversation.isGroup ? (
-						<AvatarGroup users={users} />
-					) : (
-						<Avatar user={otherUser} />
-					)}
-					<div className="flex flex-col">
-						<div>{conversation?.name || otherUser?.name}</div>
-						<div className="text-sm font-light text-neutral-500">
-							{statusText}
+			<div className="bg-white w-full flex flex-col border-b-[1px] sm:px-4 py-3 px-4 lg:px-6 shadow-sm">
+				<div className="flex justify-between items-center">
+					<div className="flex gap-3 items-center">
+						<Link
+							href="/conversations"
+							className="lg:hidden block text-sky-500 hover:text-sky-600 transition cursor-pointer"
+						>
+							<HiChevronLeft size={32} />
+						</Link>
+						{conversation.isGroup ? (
+							<AvatarGroup users={users} />
+						) : (
+							<Avatar user={otherUser} />
+						)}
+						<div className="flex flex-col">
+							<div className="text-lg font-semibold">
+								{conversation.name || otherUser.name}
+							</div>
+							<div className="text-sm font-light text-neutral-500">
+								{statusText}
+							</div>
 						</div>
 					</div>
+					<HiEllipsisHorizontal
+						size={32}
+						onClick={() => setDrawerOpen(true)}
+						className="text-sky-500 cursor-pointer hover:text-sky-600 transition"
+					/>
 				</div>
-				<HiEllipsisHorizontal
-					size={32}
-					onClick={() => setDrawerOpen(true)}
-					className="text-sky-500 cursor-pointer hover:text-sky-600 transition"
-				/>
+				{sentimentInfo && (
+					<div className={`mt-3 w-full ${sentimentInfo.bgColor} ${sentimentInfo.color} px-4 py-3 rounded-lg shadow-sm border border-opacity-10`}>
+						<div className="flex items-center gap-3">
+							{sentimentInfo.icon}
+							<div className="flex-1">
+								<div className="flex items-center justify-between">
+									<span className="font-medium">{sentimentInfo.text}</span>
+									<span className="text-sm font-medium">
+										Score: {sentimentInfo.score}/100
+									</span>
+								</div>
+								<p className="text-sm opacity-90 mt-0.5">
+									{sentimentInfo.description}
+								</p>
+							</div>
+						</div>
+					</div>
+				)}
 			</div>
 		</>
 	);
diff --git a/app/conversations/[conversationId]/components/MessageBox.tsx b/app/conversations/[conversationId]/components/MessageBox.tsx
index eb2cc85..8ade95d 100644
--- a/app/conversations/[conversationId]/components/MessageBox.tsx
+++ b/app/conversations/[conversationId]/components/MessageBox.tsx
@@ -6,8 +6,9 @@ import clsx from "clsx";
 import { format } from "date-fns";
 import { useSession } from "next-auth/react";
 import Image from "next/image";
-import { FC, useMemo, useState } from "react";
+import { FC, useEffect, useMemo, useState } from "react";
 import ImageModal from "./ImageModal";
+import { RiEmotionHappyLine, RiEmotionUnhappyLine, RiEmotionNormalLine } from "react-icons/ri";
 
 interface MessageBoxProps {
 	isLast: boolean;
@@ -46,16 +47,46 @@ const MessageBox: FC<MessageBoxProps> = ({ isLast, message }) => {
 		return seenUsers.join(", ");
 	}, [message]);
 
+	// Get sentiment information
+	const sentimentInfo = useMemo(() => {
+		if (!message?.mentalHealthInsights?.[0]) {
+			return null;
+		}
+		
+		const insight = message.mentalHealthInsights[0];
+
+		return {
+			score: insight.sentimentScore || 0,
+			emotionalState: insight.emotionalState || 'NEUTRAL'
+		};
+	}, [message?.mentalHealthInsights]);
+
 	const container = clsx("flex gap-3 p-4", isOwn && "justify-end");
 	const avatar = clsx(isOwn && "order-2");
 	const body = clsx("flex flex-col gap-2", isOwn && "items-end");
 
 	const messageContainer = clsx(
-		"text-sm w-fit overflow-hidden",
+		"text-sm w-fit overflow-hidden relative",
 		isOwn ? "text-white bg-sky-500" : "bg-gray-100",
 		message?.image ? "rounded-md p-0" : "rounded-full py-2 px-3"
 	);
 
+	// Get sentiment icon
+	const getSentimentIcon = () => {
+		if (!sentimentInfo) {
+			return null;
+		}
+		
+		switch (sentimentInfo.emotionalState) {
+			case 'POSITIVE':
+				return <RiEmotionHappyLine className="h-4 w-4 text-green-500" />;
+			case 'NEGATIVE':
+				return <RiEmotionUnhappyLine className="h-4 w-4 text-red-500" />;
+			default:
+				return <RiEmotionNormalLine className="h-4 w-4 text-yellow-500" />;
+		}
+	};
+
 	return (
 		<div className={container}>
 			<div className={avatar}>
@@ -67,6 +98,11 @@ const MessageBox: FC<MessageBoxProps> = ({ isLast, message }) => {
 					<div className="text-xs text-gray-400">
 						{format(new Date(message?.createdAt), "p")}
 					</div>
+					{sentimentInfo && (
+						<div className="ml-1">
+							{getSentimentIcon()}
+						</div>
+					)}
 				</div>
 				<div className={messageContainer}>
 					<ImageModal
diff --git a/app/conversations/[conversationId]/page.tsx b/app/conversations/[conversationId]/page.tsx
index 728183d..60459a0 100644
--- a/app/conversations/[conversationId]/page.tsx
+++ b/app/conversations/[conversationId]/page.tsx
@@ -1,17 +1,77 @@
-import getConversationById from "@/app/actions/getConversationById";
-import getMessages from "@/app/actions/getMessages";
+"use client";
+
+import { useEffect, useState } from "react";
+import { useSession } from "next-auth/react";
+import { pusherClient } from "@/app/libs/pusher";
 import EmptyState from "@/app/components/EmptyState";
+import Header from "./components/Header";
 import Body from "./components/Body";
 import Form from "./components/Form";
-import Header from "./components/Header";
+import { FullConversationType } from "@/app/types";
 
 interface IParams {
 	conversationId: string;
 }
 
-const ChatId = async ({ params }: { params: IParams }) => {
-	const conversation = await getConversationById(params.conversationId);
-	const messages = await getMessages(params.conversationId);
+const ConversationId = ({ params }: { params: IParams }) => {
+	const [conversation, setConversation] = useState<FullConversationType | null>(null);
+	const [messages, setMessages] = useState<any[]>([]);
+	const { data: session } = useSession();
+
+	useEffect(() => {
+		const fetchData = async () => {
+			try {
+				const [conversationData, messagesData] = await Promise.all([
+					fetch(`/api/conversations/${params.conversationId}`).then(res => res.json()),
+					fetch(`/api/messages?conversationId=${params.conversationId}`).then(res => res.json())
+				]);
+				setConversation(conversationData);
+				setMessages(messagesData);
+			} catch (error) {
+				console.error("Error fetching data:", error);
+			}
+		};
+
+		fetchData();
+	}, [params.conversationId]);
+
+	useEffect(() => {
+		if (!params.conversationId || !pusherClient) {
+			return;
+		}
+
+		const channel = pusherClient.subscribe(`presence-conversation-${params.conversationId}`);
+
+		const conversationUpdateHandler = (data: { id: string; lastMessageAt: Date; sentiment: any }) => {
+			setConversation(prev => {
+				if (!prev) return prev;
+				return {
+					...prev,
+					lastMessageAt: new Date(data.lastMessageAt),
+					sentiment: {
+						id: prev.sentiment?.id || 0,
+						conversationId: parseInt(data.id),
+						sentimentScore: data.sentiment.sentimentScore,
+						emotionalState: data.sentiment.emotionalState,
+						riskLevel: data.sentiment.riskLevel,
+						keywords: data.sentiment.keywords.join(','),
+						recommendations: data.sentiment.recommendations.join('\n'),
+						createdAt: prev.sentiment?.createdAt || new Date(),
+						updatedAt: new Date()
+					}
+				};
+			});
+		};
+
+		channel.bind("conversation:update", conversationUpdateHandler);
+
+		return () => {
+			channel.unbind("conversation:update", conversationUpdateHandler);
+			if (pusherClient) {
+				pusherClient.unsubscribe(`presence-conversation-${params.conversationId}`);
+			}
+		};
+	}, [params.conversationId]);
 
 	if (!conversation) {
 		return (
@@ -27,11 +87,11 @@ const ChatId = async ({ params }: { params: IParams }) => {
 		<div className="lg:pl-80 h-full">
 			<div className="h-full flex flex-col">
 				<Header conversation={conversation} />
-				<Body initialMessages={messages} />
+				<Body initialMessages={messages} conversationId={params.conversationId} />
 				<Form />
 			</div>
 		</div>
 	);
 };
 
-export default ChatId;
+export default ConversationId;
diff --git a/app/conversations/components/ConversationBox.tsx b/app/conversations/components/ConversationBox.tsx
index 256a4a3..7af6d77 100644
--- a/app/conversations/components/ConversationBox.tsx
+++ b/app/conversations/components/ConversationBox.tsx
@@ -3,6 +3,7 @@
 import { useSession } from "next-auth/react";
 import { useRouter } from "next/navigation";
 import { FC, useCallback, useMemo } from "react";
+import { MdSentimentVerySatisfied, MdSentimentVeryDissatisfied, MdSentimentNeutral } from "react-icons/md";
 
 import Avatar from "@/app/components/avatar";
 import AvatarGroup from "@/app/components/AvatarGroup";
@@ -84,6 +85,36 @@ const ConversationBox: FC<ConversationBoxProps> = ({
 		return "Start a conversation";
 	}, [lastMessage]);
 
+	const getSentimentInfo = () => {
+		if (!conversation.sentiment) return null;
+		
+		const { emotionalState, sentimentScore } = conversation.sentiment;
+		let icon;
+		let color;
+		let bgColor;
+
+		switch (emotionalState) {
+			case 'POSITIVE':
+				icon = <MdSentimentVerySatisfied className="h-5 w-5" />;
+				color = 'text-green-600';
+				bgColor = 'bg-green-50';
+				break;
+			case 'NEGATIVE':
+				icon = <MdSentimentVeryDissatisfied className="h-5 w-5" />;
+				color = 'text-red-600';
+				bgColor = 'bg-red-50';
+				break;
+			default:
+				icon = <MdSentimentNeutral className="h-5 w-5" />;
+				color = 'text-yellow-600';
+				bgColor = 'bg-yellow-50';
+		}
+
+		return { icon, color, bgColor, score: sentimentScore };
+	};
+
+	const sentimentInfo = getSentimentInfo();
+
 	return (
 		<div
 			onClick={handleClick}
@@ -92,32 +123,42 @@ const ConversationBox: FC<ConversationBoxProps> = ({
 				selected ? "bg-neutral-100" : "bg-white"
 			)}
 		>
-			{conversation.isGroup ? (
-				<AvatarGroup users={users} />
-			) : (
-				<Avatar user={otherUser} />
-			)}
+			<div className="relative">
+				{conversation.isGroup ? (
+					<AvatarGroup users={users} />
+				) : (
+					<Avatar user={otherUser} />
+				)}
+			</div>
 			<div className="min-w-0 flex-1">
-				<div className="focus:outline-none">
-					<div className="flex justify-between items-center mb-1">
-						<p className="text-md font-medium text-gray-900">
-							{conversation?.name || otherUser?.name}
+				<div className="flex justify-between items-center mb-1">
+					<div className="flex items-center gap-2">
+						<p className="text-sm font-medium text-gray-900">
+							{conversation.name || otherUser.name}
 						</p>
-						{lastMessage?.createdAt && (
-							<p className="text-xs text-gray-400 font-light">
-								{format(new Date(lastMessage.createdAt), "p")}
-							</p>
+						{sentimentInfo && (
+							<div className={`flex items-center gap-1 ${sentimentInfo.bgColor} ${sentimentInfo.color} px-2 py-0.5 rounded-full`}>
+								{sentimentInfo.icon}
+								<span className="text-xs font-medium">
+									{sentimentInfo.score}/100
+								</span>
+							</div>
 						)}
 					</div>
-					<p
-						className={clsx(
-							"truncate text-sm",
-							hasSeen ? "text-gray-500" : "text-black font-medium"
-						)}
-					>
-						{lastMessageText}
-					</p>
+					{lastMessage?.createdAt && (
+						<p className="text-xs text-gray-400 font-light">
+							{format(new Date(lastMessage.createdAt), "p")}
+						</p>
+					)}
 				</div>
+				<p
+					className={clsx(
+						"truncate text-sm",
+						hasSeen ? "text-gray-500" : "text-black font-medium"
+					)}
+				>
+					{lastMessageText}
+				</p>
 			</div>
 		</div>
 	);
diff --git a/app/libs/prismadb.ts b/app/libs/prismadb.ts
index b6ad834..ccf4e4b 100644
--- a/app/libs/prismadb.ts
+++ b/app/libs/prismadb.ts
@@ -1,9 +1,9 @@
 import { PrismaClient } from "@prisma/client";
 import { isBuildTime } from "./db-build-helper";
 
-declare global {
-  var prisma: PrismaClient | undefined;
-}
+const globalForPrisma = globalThis as unknown as {
+  prisma: PrismaClient | undefined;
+};
 
 // During build time, create a more comprehensive mock client
 class MockPrismaClient {
@@ -12,12 +12,12 @@ class MockPrismaClient {
     return new Proxy({}, {
       get: (target, prop) => {
         // Handle common Prisma model access (user, conversation, etc.)
-        if (['user', 'conversation', 'message', 'account', 'userConversation', 'userSeenMessage'].includes(prop as string)) {
+        if (['user', 'conversation', 'message', 'account', 'userConversation', 'userSeenMessage', 'mentalHealthInsight', 'conversationSentiment'].includes(prop as string)) {
           // Return a model proxy that handles CRUD operations
           return new Proxy({}, {
             get: (modelTarget, operation) => {
               // Handle common CRUD operations and return empty results
-              if (['findUnique', 'findFirst', 'findMany', 'create', 'update', 'delete', 'count'].includes(operation as string)) {
+              if (['findUnique', 'findFirst', 'findMany', 'create', 'update', 'delete', 'count', 'upsert'].includes(operation as string)) {
                 return (...args: any[]) => {
                   console.warn(`Mock PrismaClient: ${String(prop)}.${String(operation)} called during build`);
                   
@@ -26,7 +26,7 @@ class MockPrismaClient {
                     return Promise.resolve([]);
                   } else if (operation === 'count') {
                     return Promise.resolve(0); 
-                  } else if (['findUnique', 'findFirst', 'create', 'update'].includes(operation as string)) {
+                  } else if (['findUnique', 'findFirst', 'create', 'update', 'upsert'].includes(operation as string)) {
                     return Promise.resolve(null);
                   } else {
                     return Promise.resolve(null);
@@ -82,12 +82,10 @@ const createClient = () => {
 };
 
 // Create the appropriate client based on environment
-const client = globalThis.prisma || createClient();
+const prisma = globalForPrisma.prisma ?? createClient();
 
 // Save client to global object in development to prevent multiple instances
-if (process.env.NODE_ENV !== "production") {
-  globalThis.prisma = client;
-}
+if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;
 
-export default client;
+export default prisma;
 
diff --git a/app/libs/pusher.ts b/app/libs/pusher.ts
index e0fe145..cfc5635 100644
--- a/app/libs/pusher.ts
+++ b/app/libs/pusher.ts
@@ -6,8 +6,8 @@ import { isBuildTime } from "./db-build-helper";
 if (process.env.NODE_ENV === 'development') {
   console.log('[PUSHER ENV CHECK]', {
     appId: process.env.NEXT_PUBLIC_PUSHER_APP_ID ? 'defined' : 'undefined',
-    key: process.env.NEXT_PUBLIC_PUSHER_KEY ? 'defined' : 'undefined',
-    secret: process.env.PUSHER_SECRET ? 'defined' : 'undefined',
+    key: process.env.NEXT_PUBLIC_PUSHER_APP_KEY ? 'defined' : 'undefined',
+    secret: process.env.NEXT_PUBLIC_PUSHER_SECRET ? 'defined' : 'undefined',
     cluster: process.env.NEXT_PUBLIC_PUSHER_CLUSTER ? 'defined' : 'undefined',
     clusterValue: process.env.NEXT_PUBLIC_PUSHER_CLUSTER
   });
@@ -37,8 +37,8 @@ export const pusherServer = isBuildTime()
   ? new MockPusherServer() as unknown as PusherServer
   : new PusherServer({
       appId: process.env.NEXT_PUBLIC_PUSHER_APP_ID || defaultAppId,
-      key: process.env.NEXT_PUBLIC_PUSHER_KEY || defaultAppKey,
-      secret: process.env.PUSHER_SECRET || defaultSecret,
+      key: process.env.NEXT_PUBLIC_PUSHER_APP_KEY || defaultAppKey,
+      secret: process.env.NEXT_PUBLIC_PUSHER_SECRET || defaultSecret,
       cluster: process.env.NEXT_PUBLIC_PUSHER_CLUSTER || defaultCluster,
       useTLS: true,
     });
@@ -46,13 +46,14 @@ export const pusherServer = isBuildTime()
 // Only create Pusher Client in browser context
 export const pusherClient = typeof window !== 'undefined'
   ? new PusherClient(
-      process.env.NEXT_PUBLIC_PUSHER_KEY || defaultAppKey, 
+      process.env.NEXT_PUBLIC_PUSHER_APP_KEY || defaultAppKey, 
       {
+        cluster: process.env.NEXT_PUBLIC_PUSHER_CLUSTER || defaultCluster,
         channelAuthorization: {
           endpoint: "/api/pusher/auth",
           transport: "ajax",
         },
-        cluster: process.env.NEXT_PUBLIC_PUSHER_CLUSTER || defaultCluster,
+        enabledTransports: ['ws', 'wss'],
       }
     )
-  : null as unknown as PusherClient; // Cast to PusherClient to maintain type safety
+  : null;
diff --git a/app/types/index.ts b/app/types/index.ts
index a658e0e..a4a0b50 100644
--- a/app/types/index.ts
+++ b/app/types/index.ts
@@ -1,14 +1,38 @@
 import { Conversation, Message, User, UserConversation } from "@prisma/client";
 
+export interface MentalHealthInsight {
+  id: number;
+  messageId: number;
+  sentimentScore: number;
+  emotionalState: string;
+  riskLevel: string;
+  keywords: string | null;
+  recommendations: string | null;
+  createdAt: Date;
+}
+
+export interface ConversationSentiment {
+  id: number;
+  conversationId: number;
+  sentimentScore: number;
+  emotionalState: string;
+  riskLevel: string;
+  keywords: string | null;
+  recommendations: string | null;
+  createdAt: Date;
+  updatedAt: Date;
+}
+
 export type FullMessageType = Message & {
   sender: User;
   seenBy: { user: User }[];
+  mentalHealthInsights: MentalHealthInsight[];
 };
 
-// For MySQL with junction tables
 export type FullConversationType = Conversation & {
   users: (UserConversation & { user: User })[];
   messages: FullMessageType[];
+  sentiment: ConversationSentiment | null;
 };
 
 // Helper type for getting a flat user list
diff --git a/app/utils/mentalHealth.ts b/app/utils/mentalHealth.ts
new file mode 100644
index 0000000..c7d5891
--- /dev/null
+++ b/app/utils/mentalHealth.ts
@@ -0,0 +1,168 @@
+import Sentiment from 'sentiment';
+import { MentalHealthInsight } from '@/app/types';
+
+const sentiment = new Sentiment();
+
+// Keywords associated with mental health concerns
+const MENTAL_HEALTH_KEYWORDS = {
+  depression: ['sad', 'depressed', 'hopeless', 'worthless', 'suicide', 'kill myself', 'end it all'],
+  anxiety: ['anxious', 'worried', 'panic', 'fear', 'scared', 'nervous', 'overwhelmed'],
+  stress: ['stress', 'overwhelmed', 'pressure', 'can\'t handle', 'too much'],
+  crisis: ['help', 'emergency', 'crisis', 'urgent', 'desperate']
+};
+
+export type RiskLevel = 'LOW' | 'MEDIUM' | 'HIGH';
+
+const LOW: RiskLevel = 'LOW';
+const MEDIUM: RiskLevel = 'MEDIUM';
+const HIGH: RiskLevel = 'HIGH';
+
+// Resource recommendations based on risk level
+const RESOURCES: Record<RiskLevel, string[]> = {
+  [LOW]: [
+    "You're doing great! Keep focusing on the positive things in your life.",
+    "Consider journaling about what makes you happy and grateful.",
+    "Take a moment to appreciate the small joys in your day."
+  ],
+  [MEDIUM]: [
+    "It's okay to have ups and downs. Remember to be kind to yourself.",
+    "Try some mindfulness exercises to stay present and centered.",
+    "Reach out to friends or family for a chat - connection can be healing."
+  ],
+  [HIGH]: [
+    "If you're having thoughts of self-harm, please call emergency services (911) immediately.",
+    "Contact the National Suicide Prevention Lifeline at 988.",
+    "Reach out to a mental health professional as soon as possible."
+  ]
+};
+
+export interface MentalHealthAnalysis {
+  sentimentScore: number;
+  emotionalState: string;
+  riskLevel: RiskLevel;
+  keywords: string[];
+  recommendations: string[];
+}
+
+// Helper function to convert sentiment score to percentage (0-100)
+const convertToPercentage = (score: number): number => {
+  // Sentiment scores typically range from -5 to 5
+  // Convert to 0-100 scale where:
+  // -5 = 0%
+  // 0 = 50%
+  // 5 = 100%
+  const percentage = ((score + 5) / 10) * 100;
+  return Math.round(Math.max(0, Math.min(100, percentage))); // Ensure between 0-100
+};
+
+// Helper function to round to 0.1 digits
+const roundToOneDecimal = (num: number): number => {
+  return Math.round(num * 10) / 10;
+};
+
+export function analyzeMentalHealth(message: string): MentalHealthAnalysis {
+  // Perform sentiment analysis
+  const sentimentResult = sentiment.analyze(message);
+  const rawScore = roundToOneDecimal(sentimentResult.score);
+  const sentimentScore = convertToPercentage(rawScore);
+  
+  // Find matching keywords
+  const foundKeywords: string[] = [];
+  let riskLevel: RiskLevel = LOW;
+  
+  // Check for crisis keywords first
+  if (MENTAL_HEALTH_KEYWORDS.crisis.some(keyword => 
+    message.toLowerCase().includes(keyword))) {
+    riskLevel = HIGH;
+    foundKeywords.push(...MENTAL_HEALTH_KEYWORDS.crisis.filter(keyword => 
+      message.toLowerCase().includes(keyword)));
+  }
+  
+  // Check other categories
+  Object.entries(MENTAL_HEALTH_KEYWORDS).forEach(([category, keywords]) => {
+    const matches = keywords.filter(keyword => message.toLowerCase().includes(keyword));
+    if (matches.length > 0) {
+      foundKeywords.push(...matches);
+      if (category === 'depression' || category === 'anxiety') {
+        riskLevel = riskLevel === LOW ? MEDIUM : riskLevel;
+      }
+    }
+  });
+
+  // Determine emotional state based on sentiment score
+  let emotionalState = 'NEUTRAL';
+  if (sentimentScore > 65) emotionalState = 'POSITIVE';
+  else if (sentimentScore < 35) emotionalState = 'NEGATIVE';
+
+  // Adjust risk level based on sentiment score and emotional state
+  if (riskLevel === MEDIUM && sentimentScore > 50) {
+    riskLevel = LOW;
+  }
+
+  // Get recommendations based on risk level
+  const recommendations = RESOURCES[riskLevel];
+
+  return {
+    sentimentScore,
+    emotionalState,
+    riskLevel,
+    keywords: foundKeywords,
+    recommendations
+  };
+}
+
+export function shouldTriggerAlert(analysis: MentalHealthAnalysis): boolean {
+  return analysis.riskLevel === HIGH || 
+         (analysis.riskLevel === MEDIUM && analysis.sentimentScore < 20);
+}
+
+export function analyzeConversationSentiment(messages: { mentalHealthInsights: MentalHealthInsight[] }[]): MentalHealthAnalysis {
+  // Calculate average sentiment score
+  const totalScore = messages.reduce((sum, msg) => {
+    if (msg.mentalHealthInsights && msg.mentalHealthInsights.length > 0) {
+      // The scores are already in 0-100 scale, no need to convert
+      return sum + msg.mentalHealthInsights[0].sentimentScore;
+    }
+    return sum;
+  }, 0);
+  const averageScore = Math.round(messages.length > 0 ? totalScore / messages.length : 50);
+
+  // Collect all keywords and recommendations
+  const allKeywords = new Set<string>();
+  let highestRiskLevel: RiskLevel = LOW;
+
+  messages.forEach(msg => {
+    if (msg.mentalHealthInsights && msg.mentalHealthInsights.length > 0) {
+      const insight = msg.mentalHealthInsights[0];
+      if (insight.keywords) {
+        insight.keywords.split(',').forEach((keyword: string) => allKeywords.add(keyword));
+      }
+      if (insight.riskLevel === HIGH) {
+        highestRiskLevel = HIGH;
+      } else if (insight.riskLevel === MEDIUM && highestRiskLevel !== HIGH) {
+        highestRiskLevel = MEDIUM;
+      }
+    }
+  });
+
+  // Determine emotional state based on average score
+  let emotionalState = 'NEUTRAL';
+  if (averageScore > 65) emotionalState = 'POSITIVE';
+  else if (averageScore < 35) emotionalState = 'NEGATIVE';
+
+  // Adjust risk level based on average sentiment score
+  if (highestRiskLevel === MEDIUM && averageScore > 50) {
+    highestRiskLevel = LOW;
+  }
+
+  // Get recommendations based on highest risk level
+  const recommendations = RESOURCES[highestRiskLevel];
+
+  return {
+    sentimentScore: averageScore,
+    emotionalState,
+    riskLevel: highestRiskLevel,
+    keywords: Array.from(allKeywords),
+    recommendations
+  };
+} 
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
index 50337e2..9b3734c 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -26,6 +26,7 @@
         "eslint-config-next": "13.4.12",
         "lodash": "^4.17.21",
         "mysql2": "^3.14.0",
+        "natural": "^6.10.5",
         "next": "^13.5.9",
         "next-auth": "^4.22.3",
         "next-cloudinary": "^4.16.3",
@@ -40,6 +41,7 @@
         "react-icons": "^4.10.1",
         "react-select": "^5.7.4",
         "react-spinners": "^0.13.8",
+        "sentiment": "^5.0.2",
         "tailwindcss": "3.3.2",
         "typescript": "5.1.6",
         "zustand": "^4.4.0"
@@ -47,6 +49,8 @@
       "devDependencies": {
         "@types/bcrypt": "^5.0.0",
         "@types/lodash": "^4.14.196",
+        "@types/natural": "^5.1.5",
+        "@types/sentiment": "^5.0.4",
         "dotenv": "^16.4.7",
         "prisma": "^6.5.0"
       }
@@ -954,6 +958,14 @@
         "node-pre-gyp": "bin/node-pre-gyp"
       }
     },
+    "node_modules/@mongodb-js/saslprep": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/@mongodb-js/saslprep/-/saslprep-1.2.1.tgz",
+      "integrity": "sha512-1NCa8GsZ+OFLTw5KkKQS22wLS+Rs+y02sgkhr99Pm4OSXtSDHCJyq0uscPF0qA86ipGYH4PwtC2+a8Y4RKkCcg==",
+      "dependencies": {
+        "sparse-bitfield": "^3.0.3"
+      }
+    },
     "node_modules/@next-auth/prisma-adapter": {
       "version": "1.0.7",
       "resolved": "https://registry.npmjs.org/@next-auth/prisma-adapter/-/prisma-adapter-1.0.7.tgz",
@@ -1270,6 +1282,59 @@
         "@prisma/debug": "6.5.0"
       }
     },
+    "node_modules/@redis/bloom": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-1.2.0.tgz",
+      "integrity": "sha512-HG2DFjYKbpNmVXsa0keLHp/3leGJz1mjh09f2RLGGLQZzSHpkmZWuwJbAvo3QcRY8p80m5+ZdXZdYOSBLlp7Cg==",
+      "peerDependencies": {
+        "@redis/client": "^1.0.0"
+      }
+    },
+    "node_modules/@redis/client": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.6.0.tgz",
+      "integrity": "sha512-aR0uffYI700OEEH4gYnitAnv3vzVGXCFvYfdpu/CJKvk4pHfLPEy/JSZyrpQ+15WhXe1yJRXLtfQ84s4mEXnPg==",
+      "dependencies": {
+        "cluster-key-slot": "1.1.2",
+        "generic-pool": "3.9.0",
+        "yallist": "4.0.0"
+      },
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/@redis/graph": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@redis/graph/-/graph-1.1.1.tgz",
+      "integrity": "sha512-FEMTcTHZozZciLRl6GiiIB4zGm5z5F3F6a6FZCyrfxdKOhFlGkiAqlexWMBzCi4DcRoyiOsuLfW+cjlGWyExOw==",
+      "peerDependencies": {
+        "@redis/client": "^1.0.0"
+      }
+    },
+    "node_modules/@redis/json": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/@redis/json/-/json-1.0.7.tgz",
+      "integrity": "sha512-6UyXfjVaTBTJtKNG4/9Z8PSpKE6XgSyEb8iwaqDcy+uKrd/DGYHTWkUdnQDyzm727V7p21WUMhsqz5oy65kPcQ==",
+      "peerDependencies": {
+        "@redis/client": "^1.0.0"
+      }
+    },
+    "node_modules/@redis/search": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@redis/search/-/search-1.2.0.tgz",
+      "integrity": "sha512-tYoDBbtqOVigEDMAcTGsRlMycIIjwMCgD8eR2t0NANeQmgK/lvxNAvYyb6bZDD4frHRhIHkJu2TBRvB0ERkOmw==",
+      "peerDependencies": {
+        "@redis/client": "^1.0.0"
+      }
+    },
+    "node_modules/@redis/time-series": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-1.1.0.tgz",
+      "integrity": "sha512-c1Q99M5ljsIuc4YdaCwfUEXsofakb9c8+Zse2qxTadu8TalLXuAESzLvFAvNVbkmSlvlzIQOLpBCmWI9wTOt+g==",
+      "peerDependencies": {
+        "@redis/client": "^1.0.0"
+      }
+    },
     "node_modules/@rushstack/eslint-patch": {
       "version": "1.3.2",
       "resolved": "https://registry.npmjs.org/@rushstack/eslint-patch/-/eslint-patch-1.3.2.tgz",
@@ -1315,6 +1380,15 @@
       "integrity": "sha512-22y3o88f4a94mKljsZcanlNWPzO0uBsBdzLAngf2tp533LzZcQzb6+eZPJ+vCTt+bqF2XnvT9gejTLsAcJAJyQ==",
       "dev": true
     },
+    "node_modules/@types/natural": {
+      "version": "5.1.5",
+      "resolved": "https://registry.npmjs.org/@types/natural/-/natural-5.1.5.tgz",
+      "integrity": "sha512-HE6F0/q4YBRWpbqua2waJck4IBY/HLWGFLrdbkD9sMSdufyCCuTe3Gy5N4kn8/8XFhz6L/mm9RLs/kJTiT3tcg==",
+      "dev": true,
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
     "node_modules/@types/node": {
       "version": "20.3.2",
       "resolved": "https://registry.npmjs.org/@types/node/-/node-20.3.2.tgz",
@@ -1383,6 +1457,25 @@
       "resolved": "https://registry.npmjs.org/@types/scheduler/-/scheduler-0.16.3.tgz",
       "integrity": "sha512-5cJ8CB4yAx7BH1oMvdU0Jh9lrEXyPkar6F9G/ERswkCuvP4KQZfZkSjcMbAICCpQTN4OuZn8tz0HiKv9TGZgrQ=="
     },
+    "node_modules/@types/sentiment": {
+      "version": "5.0.4",
+      "resolved": "https://registry.npmjs.org/@types/sentiment/-/sentiment-5.0.4.tgz",
+      "integrity": "sha512-6FL0CYijhnrR3gHbu7boAJn8zRCekJXBPfIHLkIgWbkY+hz5Dwfsq79FM7l/tLZKuEgQWktnzf6JqV2UCWKrbg==",
+      "dev": true
+    },
+    "node_modules/@types/webidl-conversions": {
+      "version": "7.0.3",
+      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.3.tgz",
+      "integrity": "sha512-CiJJvcRtIgzadHCYXw7dqEnMNRjhGZlYK05Mj9OyktqV8uVT8fD2BFOB7S1uwBE3Kj2Z+4UyPmFw/Ixgw/LAlA=="
+    },
+    "node_modules/@types/whatwg-url": {
+      "version": "11.0.5",
+      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-11.0.5.tgz",
+      "integrity": "sha512-coYR071JRaHa+xoEvvYqvnIHaVqaYrLPbsufM9BF63HkwI5Lgmy2QR8Q5K/lYDYo5AK82wOvSOS0UsLTpTG7uQ==",
+      "dependencies": {
+        "@types/webidl-conversions": "*"
+      }
+    },
     "node_modules/@typescript-eslint/parser": {
       "version": "5.62.0",
       "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-5.62.0.tgz",
@@ -1514,6 +1607,24 @@
         "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
       }
     },
+    "node_modules/afinn-165": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/afinn-165/-/afinn-165-1.0.4.tgz",
+      "integrity": "sha512-7+Wlx3BImrK0HiG6y3lU4xX7SpBPSSu8T9iguPMlaueRFxjbYwAQrp9lqZUuFikqKbd/en8lVREILvP2J80uJA==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/afinn-165-financialmarketnews": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/afinn-165-financialmarketnews/-/afinn-165-financialmarketnews-3.0.0.tgz",
+      "integrity": "sha512-0g9A1S3ZomFIGDTzZ0t6xmv4AuokBvBmpes8htiyHpH7N4xDmvSQL6UxL/Zcs2ypRb3VwgCscaD8Q3zEawKYhw==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
     "node_modules/agent-base": {
       "version": "6.0.2",
       "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
@@ -1579,6 +1690,17 @@
         "node": ">= 8"
       }
     },
+    "node_modules/apparatus": {
+      "version": "0.0.10",
+      "resolved": "https://registry.npmjs.org/apparatus/-/apparatus-0.0.10.tgz",
+      "integrity": "sha512-KLy/ugo33KZA7nugtQ7O0E1c8kQ52N3IvD/XgIh4w/Nr28ypfkwDfA67F1ev4N1m5D+BOk1+b2dEJDfpj/VvZg==",
+      "dependencies": {
+        "sylvester": ">= 0.0.8"
+      },
+      "engines": {
+        "node": ">=0.2.6"
+      }
+    },
     "node_modules/aproba": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
@@ -1935,6 +2057,14 @@
         "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
       }
     },
+    "node_modules/bson": {
+      "version": "6.10.3",
+      "resolved": "https://registry.npmjs.org/bson/-/bson-6.10.3.tgz",
+      "integrity": "sha512-MTxGsqgYTwfshYWTRdmZRC+M7FnG1b4y7RO7p2k3X24Wq0yv1m77Wsj0BzlPzd/IowgESfsruQCUToa7vbOpPQ==",
+      "engines": {
+        "node": ">=16.20.1"
+      }
+    },
     "node_modules/bundle-name": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/bundle-name/-/bundle-name-3.0.0.tgz",
@@ -2080,6 +2210,14 @@
         "node": ">=6"
       }
     },
+    "node_modules/cluster-key-slot": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/cluster-key-slot/-/cluster-key-slot-1.1.2.tgz",
+      "integrity": "sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/color-convert": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
@@ -2389,7 +2527,6 @@
       "version": "16.4.7",
       "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
       "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
-      "dev": true,
       "license": "BSD-2-Clause",
       "engines": {
         "node": ">=12"
@@ -3331,6 +3468,14 @@
         "is-property": "^1.0.2"
       }
     },
+    "node_modules/generic-pool": {
+      "version": "3.9.0",
+      "resolved": "https://registry.npmjs.org/generic-pool/-/generic-pool-3.9.0.tgz",
+      "integrity": "sha512-hymDOu5B53XvN4QT9dBmZxPX4CWhBPPLguTZ9MMFeFa/Kg0xWVfylOVNlJji/E7yTZWFd/q9GO5TxDLq156D7g==",
+      "engines": {
+        "node": ">= 4"
+      }
+    },
     "node_modules/get-intrinsic": {
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.1.tgz",
@@ -4086,6 +4231,14 @@
         "node": ">=4.0"
       }
     },
+    "node_modules/kareem": {
+      "version": "2.6.3",
+      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.6.3.tgz",
+      "integrity": "sha512-C3iHfuGUXK2u8/ipq9LfjFfXFxAZMQJJq7vLS45r3D9Y2xQ/m4S8zaR4zMLFWh9AsNPXmcFfUDhTEO8UIC/V6Q==",
+      "engines": {
+        "node": ">=12.0.0"
+      }
+    },
     "node_modules/language-subtag-registry": {
       "version": "0.3.22",
       "resolved": "https://registry.npmjs.org/language-subtag-registry/-/language-subtag-registry-0.3.22.tgz",
@@ -4213,11 +4366,24 @@
         "semver": "bin/semver.js"
       }
     },
+    "node_modules/memjs": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/memjs/-/memjs-1.3.2.tgz",
+      "integrity": "sha512-qUEg2g8vxPe+zPn09KidjIStHPtoBO8Cttm8bgJFWWabbsjQ9Av9Ky+6UcvKx6ue0LLb/LEhtcyQpRyKfzeXcg==",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/memoize-one": {
       "version": "6.0.0",
       "resolved": "https://registry.npmjs.org/memoize-one/-/memoize-one-6.0.0.tgz",
       "integrity": "sha512-rkpe71W0N0c0Xz6QD0eJETuWAJGnJ9afsl1srmwPrI+yBCkge5EycXXbYRyvL29zZVUWQCY7InPRCv3GDXuZNw=="
     },
+    "node_modules/memory-pager": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
+      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg=="
+    },
     "node_modules/merge-stream": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
@@ -4343,6 +4509,136 @@
         "node": ">=10"
       }
     },
+    "node_modules/mongodb": {
+      "version": "6.15.0",
+      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-6.15.0.tgz",
+      "integrity": "sha512-ifBhQ0rRzHDzqp9jAQP6OwHSH7dbYIQjD3SbJs9YYk9AikKEettW/9s/tbSFDTpXcRbF+u1aLrhHxDFaYtZpFQ==",
+      "dependencies": {
+        "@mongodb-js/saslprep": "^1.1.9",
+        "bson": "^6.10.3",
+        "mongodb-connection-string-url": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=16.20.1"
+      },
+      "peerDependencies": {
+        "@aws-sdk/credential-providers": "^3.188.0",
+        "@mongodb-js/zstd": "^1.1.0 || ^2.0.0",
+        "gcp-metadata": "^5.2.0",
+        "kerberos": "^2.0.1",
+        "mongodb-client-encryption": ">=6.0.0 <7",
+        "snappy": "^7.2.2",
+        "socks": "^2.7.1"
+      },
+      "peerDependenciesMeta": {
+        "@aws-sdk/credential-providers": {
+          "optional": true
+        },
+        "@mongodb-js/zstd": {
+          "optional": true
+        },
+        "gcp-metadata": {
+          "optional": true
+        },
+        "kerberos": {
+          "optional": true
+        },
+        "mongodb-client-encryption": {
+          "optional": true
+        },
+        "snappy": {
+          "optional": true
+        },
+        "socks": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/mongodb-connection-string-url": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-3.0.2.tgz",
+      "integrity": "sha512-rMO7CGo/9BFwyZABcKAWL8UJwH/Kc2x0g72uhDWzG48URRax5TCIcJ7Rc3RZqffZzO/Gwff/jyKwCU9TN8gehA==",
+      "dependencies": {
+        "@types/whatwg-url": "^11.0.2",
+        "whatwg-url": "^14.1.0 || ^13.0.0"
+      }
+    },
+    "node_modules/mongodb-connection-string-url/node_modules/tr46": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/tr46/-/tr46-5.1.0.tgz",
+      "integrity": "sha512-IUWnUK7ADYR5Sl1fZlO1INDUhVhatWl7BtJWsIhwJ0UAK7ilzzIa8uIqOO/aYVWHZPJkKbEL+362wrzoeRF7bw==",
+      "dependencies": {
+        "punycode": "^2.3.1"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/mongodb-connection-string-url/node_modules/webidl-conversions": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
+      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/mongodb-connection-string-url/node_modules/whatwg-url": {
+      "version": "14.2.0",
+      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-14.2.0.tgz",
+      "integrity": "sha512-De72GdQZzNTUBBChsXueQUnPKDkg/5A5zp7pFDuQAj5UFoENpiACU0wlCvzpAGnTkj++ihpKwKyYewn/XNUbKw==",
+      "dependencies": {
+        "tr46": "^5.1.0",
+        "webidl-conversions": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/mongoose": {
+      "version": "8.13.1",
+      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-8.13.1.tgz",
+      "integrity": "sha512-sRqlXI+6jhr9/KicCOjet1VVPONFsOxTrh14tfueX5y3GJ2ihswc5ewUUojuwdSS/5koGXLIPmGivDSApVXflA==",
+      "dependencies": {
+        "bson": "^6.10.3",
+        "kareem": "2.6.3",
+        "mongodb": "~6.15.0",
+        "mpath": "0.9.0",
+        "mquery": "5.0.0",
+        "ms": "2.1.3",
+        "sift": "17.1.3"
+      },
+      "engines": {
+        "node": ">=16.20.1"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/mongoose"
+      }
+    },
+    "node_modules/mongoose/node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
+    },
+    "node_modules/mpath": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
+      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==",
+      "engines": {
+        "node": ">=4.0.0"
+      }
+    },
+    "node_modules/mquery": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/mquery/-/mquery-5.0.0.tgz",
+      "integrity": "sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==",
+      "dependencies": {
+        "debug": "4.x"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
     "node_modules/ms": {
       "version": "2.1.2",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
@@ -4417,11 +4713,47 @@
         "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
       }
     },
+    "node_modules/natural": {
+      "version": "6.12.0",
+      "resolved": "https://registry.npmjs.org/natural/-/natural-6.12.0.tgz",
+      "integrity": "sha512-ZV/cuaxOvJ7CSxQRYHc6nlx7ql6hVPQc20N5ubdqVbotWnnqsNc+0/QG+ACIC3XPQ4rfrQrdC/1k47v1cSszTQ==",
+      "dependencies": {
+        "afinn-165": "^1.0.2",
+        "afinn-165-financialmarketnews": "^3.0.0",
+        "apparatus": "^0.0.10",
+        "dotenv": "^16.4.5",
+        "memjs": "^1.3.2",
+        "mongoose": "^8.2.0",
+        "pg": "^8.11.3",
+        "redis": "^4.6.13",
+        "safe-stable-stringify": "^2.2.0",
+        "stopwords-iso": "^1.1.0",
+        "sylvester": "^0.0.12",
+        "underscore": "^1.9.1",
+        "uuid": "^9.0.1",
+        "wordnet-db": "^3.1.11"
+      },
+      "engines": {
+        "node": ">=0.4.10"
+      }
+    },
     "node_modules/natural-compare": {
       "version": "1.4.0",
       "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
       "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw=="
     },
+    "node_modules/natural/node_modules/uuid": {
+      "version": "9.0.1",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
+      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
+      "funding": [
+        "https://github.com/sponsors/broofa",
+        "https://github.com/sponsors/ctavan"
+      ],
+      "bin": {
+        "uuid": "dist/bin/uuid"
+      }
+    },
     "node_modules/next": {
       "version": "13.5.9",
       "resolved": "https://registry.npmjs.org/next/-/next-13.5.9.tgz",
@@ -4940,6 +5272,87 @@
         "node": ">=8"
       }
     },
+    "node_modules/pg": {
+      "version": "8.14.1",
+      "resolved": "https://registry.npmjs.org/pg/-/pg-8.14.1.tgz",
+      "integrity": "sha512-0TdbqfjwIun9Fm/r89oB7RFQ0bLgduAhiIqIXOsyKoiC/L54DbuAAzIEN/9Op0f1Po9X7iCPXGoa/Ah+2aI8Xw==",
+      "dependencies": {
+        "pg-connection-string": "^2.7.0",
+        "pg-pool": "^3.8.0",
+        "pg-protocol": "^1.8.0",
+        "pg-types": "^2.1.0",
+        "pgpass": "1.x"
+      },
+      "engines": {
+        "node": ">= 8.0.0"
+      },
+      "optionalDependencies": {
+        "pg-cloudflare": "^1.1.1"
+      },
+      "peerDependencies": {
+        "pg-native": ">=3.0.1"
+      },
+      "peerDependenciesMeta": {
+        "pg-native": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/pg-cloudflare": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.1.1.tgz",
+      "integrity": "sha512-xWPagP/4B6BgFO+EKz3JONXv3YDgvkbVrGw2mTo3D6tVDQRh1e7cqVGvyR3BE+eQgAvx1XhW/iEASj4/jCWl3Q==",
+      "optional": true
+    },
+    "node_modules/pg-connection-string": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.7.0.tgz",
+      "integrity": "sha512-PI2W9mv53rXJQEOb8xNR8lH7Hr+EKa6oJa38zsK0S/ky2er16ios1wLKhZyxzD7jUReiWokc9WK5nxSnC7W1TA=="
+    },
+    "node_modules/pg-int8": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
+      "integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==",
+      "engines": {
+        "node": ">=4.0.0"
+      }
+    },
+    "node_modules/pg-pool": {
+      "version": "3.8.0",
+      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.8.0.tgz",
+      "integrity": "sha512-VBw3jiVm6ZOdLBTIcXLNdSotb6Iy3uOCwDGFAksZCXmi10nyRvnP2v3jl4d+IsLYRyXf6o9hIm/ZtUzlByNUdw==",
+      "peerDependencies": {
+        "pg": ">=8.0"
+      }
+    },
+    "node_modules/pg-protocol": {
+      "version": "1.8.0",
+      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.8.0.tgz",
+      "integrity": "sha512-jvuYlEkL03NRvOoyoRktBK7+qU5kOvlAwvmrH8sr3wbLrOdVWsRxQfz8mMy9sZFsqJ1hEWNfdWKI4SAmoL+j7g=="
+    },
+    "node_modules/pg-types": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
+      "integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
+      "dependencies": {
+        "pg-int8": "1.0.1",
+        "postgres-array": "~2.0.0",
+        "postgres-bytea": "~1.0.0",
+        "postgres-date": "~1.0.4",
+        "postgres-interval": "^1.1.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/pgpass": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
+      "integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
+      "dependencies": {
+        "split2": "^4.1.0"
+      }
+    },
     "node_modules/picocolors": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
@@ -5104,6 +5517,41 @@
       "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
       "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ=="
     },
+    "node_modules/postgres-array": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
+      "integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/postgres-bytea": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
+      "integrity": "sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/postgres-date": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
+      "integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/postgres-interval": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
+      "integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
+      "dependencies": {
+        "xtend": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/preact": {
       "version": "10.16.0",
       "resolved": "https://registry.npmjs.org/preact/-/preact-10.16.0.tgz",
@@ -5182,9 +5630,9 @@
       "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
     },
     "node_modules/punycode": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.0.tgz",
-      "integrity": "sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA==",
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
+      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
       "engines": {
         "node": ">=6"
       }
@@ -5374,6 +5822,19 @@
         "node": ">=8.10.0"
       }
     },
+    "node_modules/redis": {
+      "version": "4.7.0",
+      "resolved": "https://registry.npmjs.org/redis/-/redis-4.7.0.tgz",
+      "integrity": "sha512-zvmkHEAdGMn+hMRXuMBtu4Vo5P6rHQjLoHftu+lBqq8ZTA3RCVC/WzD790bkKKiNFp7d5/9PcSD19fJyyRvOdQ==",
+      "dependencies": {
+        "@redis/bloom": "1.2.0",
+        "@redis/client": "1.6.0",
+        "@redis/graph": "1.1.1",
+        "@redis/json": "1.0.7",
+        "@redis/search": "1.2.0",
+        "@redis/time-series": "1.1.0"
+      }
+    },
     "node_modules/regenerator-runtime": {
       "version": "0.14.1",
       "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
@@ -5618,6 +6079,14 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/safe-stable-stringify": {
+      "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.5.0.tgz",
+      "integrity": "sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==",
+      "engines": {
+        "node": ">=10"
+      }
+    },
     "node_modules/safer-buffer": {
       "version": "2.1.2",
       "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
@@ -5646,6 +6115,14 @@
         "node": ">=10"
       }
     },
+    "node_modules/sentiment": {
+      "version": "5.0.2",
+      "resolved": "https://registry.npmjs.org/sentiment/-/sentiment-5.0.2.tgz",
+      "integrity": "sha512-ZeC3y0JsOYTdwujt5uOd7ILJNilbgFzUtg/LEG4wUv43LayFNLZ28ec8+Su+h3saHlJmIwYxBzfDHHZuiMA15g==",
+      "engines": {
+        "node": ">=8.0"
+      }
+    },
     "node_modules/seq-queue": {
       "version": "0.0.5",
       "resolved": "https://registry.npmjs.org/seq-queue/-/seq-queue-0.0.5.tgz",
@@ -5688,6 +6165,11 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/sift": {
+      "version": "17.1.3",
+      "resolved": "https://registry.npmjs.org/sift/-/sift-17.1.3.tgz",
+      "integrity": "sha512-Rtlj66/b0ICeFzYTuNvX/EF1igRbbnGSvEyT79McoZa/DeGhMyC5pWKOEsZKnpkqtSeovd5FL/bjHWC3CIIvCQ=="
+    },
     "node_modules/signal-exit": {
       "version": "3.0.7",
       "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
@@ -5717,6 +6199,22 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/sparse-bitfield": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
+      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
+      "dependencies": {
+        "memory-pager": "^1.0.2"
+      }
+    },
+    "node_modules/split2": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
+      "integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
+      "engines": {
+        "node": ">= 10.x"
+      }
+    },
     "node_modules/sqlstring": {
       "version": "2.3.3",
       "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.3.tgz",
@@ -5726,6 +6224,14 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/stopwords-iso": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/stopwords-iso/-/stopwords-iso-1.1.0.tgz",
+      "integrity": "sha512-I6GPS/E0zyieHehMRPQcqkiBMJKGgLta+1hREixhoLPqEA0AlVFiC43dl8uPpmkkeRdDMzYRWFWk5/l9x7nmNg==",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/streamsearch": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
@@ -5962,6 +6468,14 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/sylvester": {
+      "version": "0.0.12",
+      "resolved": "https://registry.npmjs.org/sylvester/-/sylvester-0.0.12.tgz",
+      "integrity": "sha512-SzRP5LQ6Ts2G5NyAa/jg16s8e3R7rfdFjizy1zeoecYWw+nGL+YA1xZvW/+iJmidBGSdLkuvdwTYEyJEb+EiUw==",
+      "engines": {
+        "node": ">=0.2.6"
+      }
+    },
     "node_modules/synckit": {
       "version": "0.8.5",
       "resolved": "https://registry.npmjs.org/synckit/-/synckit-0.8.5.tgz",
@@ -6266,6 +6780,11 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/underscore": {
+      "version": "1.13.7",
+      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.13.7.tgz",
+      "integrity": "sha512-GMXzWtsc57XAtguZgaQViUOzs0KTkk8ojr3/xAxXLITqf/3EMwxC0inyETfDFjH/Krbhuep0HNbbjI9i/q3F3g=="
+    },
     "node_modules/untildify": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/untildify/-/untildify-4.0.0.tgz",
@@ -6426,11 +6945,27 @@
         "string-width": "^1.0.2 || 2 || 3 || 4"
       }
     },
+    "node_modules/wordnet-db": {
+      "version": "3.1.14",
+      "resolved": "https://registry.npmjs.org/wordnet-db/-/wordnet-db-3.1.14.tgz",
+      "integrity": "sha512-zVyFsvE+mq9MCmwXUWHIcpfbrHHClZWZiVOzKSxNJruIcFn2RbY55zkhiAMMxM8zCVSmtNiViq8FsAZSFpMYag==",
+      "engines": {
+        "node": ">=0.6.0"
+      }
+    },
     "node_modules/wrappy": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
       "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
     },
+    "node_modules/xtend": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
+      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
+      "engines": {
+        "node": ">=0.4"
+      }
+    },
     "node_modules/yallist": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
diff --git a/package.json b/package.json
index ef7ae79..61a13a1 100644
--- a/package.json
+++ b/package.json
@@ -28,6 +28,7 @@
     "eslint-config-next": "13.4.12",
     "lodash": "^4.17.21",
     "mysql2": "^3.14.0",
+    "natural": "^6.10.5",
     "next": "^13.5.9",
     "next-auth": "^4.22.3",
     "next-cloudinary": "^4.16.3",
@@ -42,6 +43,7 @@
     "react-icons": "^4.10.1",
     "react-select": "^5.7.4",
     "react-spinners": "^0.13.8",
+    "sentiment": "^5.0.2",
     "tailwindcss": "3.3.2",
     "typescript": "5.1.6",
     "zustand": "^4.4.0"
@@ -49,6 +51,8 @@
   "devDependencies": {
     "@types/bcrypt": "^5.0.0",
     "@types/lodash": "^4.14.196",
+    "@types/natural": "^5.1.5",
+    "@types/sentiment": "^5.0.4",
     "dotenv": "^16.4.7",
     "prisma": "^6.5.0"
   }
diff --git a/pages/api/pusher/auth.ts b/pages/api/pusher/auth.ts
deleted file mode 100644
index 55a18ff..0000000
--- a/pages/api/pusher/auth.ts
+++ /dev/null
@@ -1,26 +0,0 @@
-import { NextApiRequest, NextApiResponse } from "next";
-import { getServerSession } from "next-auth";
-
-import { authOptions } from "@/app/api/auth/[...nextauth]/route";
-import { pusherServer } from "@/app/libs/pusher";
-
-export default async function handler(
-	request: NextApiRequest,
-	response: NextApiResponse
-) {
-	// @ts-ignore
-	const session = await getServerSession(request, response, authOptions);
-
-	if (!session?.user?.email) {
-		return response.status(401).end();
-	}
-
-	const socketId = request.body.socket_id;
-	const channel = request.body.channel_name;
-	const data = {
-		user_id: session.user.email,
-	};
-
-	const authResponse = pusherServer.authorizeChannel(socketId, channel, data);
-	return response.status(200).json(authResponse);
-}
diff --git a/prisma/migrations/20250322212539_init/migration.sql b/prisma/migrations/20250404195239_add_conversation_sentiment/migration.sql
similarity index 70%
rename from prisma/migrations/20250322212539_init/migration.sql
rename to prisma/migrations/20250404195239_add_conversation_sentiment/migration.sql
index 6500a57..279298c 100644
--- a/prisma/migrations/20250322212539_init/migration.sql
+++ b/prisma/migrations/20250404195239_add_conversation_sentiment/migration.sql
@@ -71,6 +71,36 @@ CREATE TABLE `UserSeenMessage` (
     PRIMARY KEY (`userId`, `messageId`)
 ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
 
+-- CreateTable
+CREATE TABLE `MentalHealthInsight` (
+    `id` INTEGER NOT NULL AUTO_INCREMENT,
+    `messageId` INTEGER NOT NULL,
+    `sentimentScore` DOUBLE NOT NULL,
+    `emotionalState` VARCHAR(191) NOT NULL,
+    `riskLevel` VARCHAR(191) NOT NULL DEFAULT 'LOW',
+    `keywords` TEXT NULL,
+    `createdAt` DATETIME(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),
+    `recommendations` TEXT NULL,
+
+    PRIMARY KEY (`id`)
+) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
+
+-- CreateTable
+CREATE TABLE `ConversationSentiment` (
+    `id` INTEGER NOT NULL AUTO_INCREMENT,
+    `conversationId` INTEGER NOT NULL,
+    `sentimentScore` DOUBLE NOT NULL,
+    `emotionalState` VARCHAR(191) NOT NULL,
+    `riskLevel` VARCHAR(191) NOT NULL DEFAULT 'LOW',
+    `keywords` TEXT NULL,
+    `recommendations` TEXT NULL,
+    `createdAt` DATETIME(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),
+    `updatedAt` DATETIME(3) NOT NULL,
+
+    UNIQUE INDEX `ConversationSentiment_conversationId_key`(`conversationId`),
+    PRIMARY KEY (`id`)
+) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
+
 -- AddForeignKey
 ALTER TABLE `Account` ADD CONSTRAINT `Account_userId_fkey` FOREIGN KEY (`userId`) REFERENCES `User`(`id`) ON DELETE CASCADE ON UPDATE CASCADE;
 
@@ -91,3 +121,9 @@ ALTER TABLE `UserSeenMessage` ADD CONSTRAINT `UserSeenMessage_userId_fkey` FOREI
 
 -- AddForeignKey
 ALTER TABLE `UserSeenMessage` ADD CONSTRAINT `UserSeenMessage_messageId_fkey` FOREIGN KEY (`messageId`) REFERENCES `Message`(`id`) ON DELETE CASCADE ON UPDATE CASCADE;
+
+-- AddForeignKey
+ALTER TABLE `MentalHealthInsight` ADD CONSTRAINT `MentalHealthInsight_messageId_fkey` FOREIGN KEY (`messageId`) REFERENCES `Message`(`id`) ON DELETE CASCADE ON UPDATE CASCADE;
+
+-- AddForeignKey
+ALTER TABLE `ConversationSentiment` ADD CONSTRAINT `ConversationSentiment_conversationId_fkey` FOREIGN KEY (`conversationId`) REFERENCES `Conversation`(`id`) ON DELETE CASCADE ON UPDATE CASCADE;
diff --git a/prisma/schema.prisma b/prisma/schema.prisma
index 5af1010..54ad1c4 100644
--- a/prisma/schema.prisma
+++ b/prisma/schema.prisma
@@ -56,6 +56,7 @@ model Conversation {
   // Relationships
   messages      Message[]
   users         UserConversation[]
+  sentiment     ConversationSentiment?
 }
 
 // Junction table for User-Conversation many-to-many relationship
@@ -70,19 +71,16 @@ model UserConversation {
 }
 
 model Message {
-  id            Int      @id @default(autoincrement())
-  body          String?  @db.Text
-  image         String?
-  createdAt     DateTime @default(now())
-  
-  // Foreign keys
+  id             Int      @id @default(autoincrement())
+  body           String?  @db.Text
+  image          String?
+  createdAt      DateTime @default(now())
   conversationId Int
   senderId       Int
-
-  // Relationships
-  conversation   Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
-  sender         User             @relation(fields: [senderId], references: [id], onDelete: Cascade)
+  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
+  sender         User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
   seenBy         UserSeenMessage[]
+  mentalHealthInsights MentalHealthInsight[]
 }
 
 // Junction table for Message-User seen relationship
@@ -96,6 +94,31 @@ model UserSeenMessage {
   @@id([userId, messageId])
 }
 
+model MentalHealthInsight {
+  id              Int      @id @default(autoincrement())
+  messageId       Int
+  message         Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
+  sentimentScore  Float
+  emotionalState  String
+  riskLevel       String   @default("LOW") // LOW, MEDIUM, HIGH
+  keywords        String?  @db.Text
+  createdAt       DateTime @default(now())
+  recommendations String?  @db.Text
+}
+
+model ConversationSentiment {
+  id              Int      @id @default(autoincrement())
+  conversationId  Int      @unique
+  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
+  sentimentScore  Float
+  emotionalState  String
+  riskLevel       String   @default("LOW")
+  keywords        String?  @db.Text
+  recommendations String?  @db.Text
+  createdAt       DateTime @default(now())
+  updatedAt       DateTime @updatedAt
+}
+
 
 
 
